/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>



#include "TYMapSDK/src/Utils/IPEncryption.hpp"
#include "TYMapSDK/src/Utils/MD5Utils.hpp"
#include "TYMapSDK/src/Utils/IPLicenseValidation.h"
#include "TYMapSDK/src/Utils/IPXGeosGeometryCaster.hpp"

#include <geos.h>
#include <geos/geom.h>

#include "TYMapSDK/src/RouteNetwork/IPXRouteNetworkDataset.hpp"
#include "TYMapSDK/src/RouteNetwork/IPXRouteNetworkDBAdapter.hpp"

#include "TYMapSDK/src/MapDB/IPXFeatureRecord.hpp"
#include "TYMapSDK/src/MapDB/IPXMapDataDBAdapter.hpp"

#include "TYMapSDK/src/PathCalibration/IPXPathCalibration.hpp"

using namespace std;
using namespace Innerpeacer::MapSDK;
using namespace Innerpeacer::MapSDK::GeosGeometryCaster;
using namespace Innerpeacer::MapSDK::Encryption;
using namespace Innerpeacer::MapSDK::License;

using namespace geos;
using namespace geos::geom;


SWIGINTERN std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::const_reference std_vector_Sl_Innerpeacer_MapSDK_IPXFeatureRecord_Sm__Sg__get(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Innerpeacer_MapSDK_IPXFeatureRecord_Sm__Sg__set(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *self,int i,std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXGeosGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geos::geom::Geometry *arg1 = (geos::geom::Geometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geos::geom::Geometry **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosGeometry_1getGeometryTypeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  geos::geom::Geometry *arg1 = (geos::geom::Geometry *) 0 ;
  geos::geom::GeometryTypeId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Geometry **)&jarg1; 
  result = (geos::geom::GeometryTypeId)((geos::geom::Geometry const *)arg1)->getGeometryTypeId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXGeosGeometryCollection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geos::geom::GeometryCollection *arg1 = (geos::geom::GeometryCollection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geos::geom::GeometryCollection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosCoordinate_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  geos::geom::Coordinate *arg1 = (geos::geom::Coordinate *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Coordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosCoordinate_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  geos::geom::Coordinate *arg1 = (geos::geom::Coordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Coordinate **)&jarg1; 
  result = (double) ((arg1)->x);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosCoordinate_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  geos::geom::Coordinate *arg1 = (geos::geom::Coordinate *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Coordinate **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosCoordinate_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  geos::geom::Coordinate *arg1 = (geos::geom::Coordinate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Coordinate **)&jarg1; 
  result = (double) ((arg1)->y);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_new_1IPXGeosCoordinate(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  geos::geom::Coordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (geos::geom::Coordinate *)new geos::geom::Coordinate();
  *(geos::geom::Coordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXGeosCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geos::geom::Coordinate *arg1 = (geos::geom::Coordinate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geos::geom::Coordinate **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosPoint_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  geos::geom::Point *arg1 = (geos::geom::Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Point **)&jarg1; 
  result = (double)((geos::geom::Point const *)arg1)->getX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosPoint_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  geos::geom::Point *arg1 = (geos::geom::Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Point **)&jarg1; 
  result = (double)((geos::geom::Point const *)arg1)->getY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXGeosPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geos::geom::Point *arg1 = (geos::geom::Point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geos::geom::Point **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosMutliPoint_1getNumGeometries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::MultiPoint *arg1 = (geos::geom::MultiPoint *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::MultiPoint **)&jarg1; 
  result = (std::size_t)((geos::geom::MultiPoint const *)arg1)->getNumGeometries();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosMutliPoint_1getGeometryN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  geos::geom::MultiPoint *arg1 = (geos::geom::MultiPoint *) 0 ;
  std::size_t arg2 ;
  geos::geom::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::MultiPoint **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  result = (geos::geom::Geometry *)((geos::geom::MultiPoint const *)arg1)->getGeometryN(arg2);
  *(geos::geom::Geometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXGeosMutliPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geos::geom::MultiPoint *arg1 = (geos::geom::MultiPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geos::geom::MultiPoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosGeometryFactory_1createPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  geos::geom::GeometryFactory *arg1 = (geos::geom::GeometryFactory *) 0 ;
  geos::geom::Coordinate *arg2 = 0 ;
  geos::geom::Point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(geos::geom::GeometryFactory **)&jarg1; 
  arg2 = *(geos::geom::Coordinate **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "geos::geom::Coordinate const & reference is null");
    return 0;
  } 
  result = (geos::geom::Point *)((geos::geom::GeometryFactory const *)arg1)->createPoint((geos::geom::Coordinate const &)*arg2);
  *(geos::geom::Point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_new_1IPXGeosGeometryFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  geos::geom::GeometryFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (geos::geom::GeometryFactory *)new geos::geom::GeometryFactory();
  *(geos::geom::GeometryFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXGeosGeometryFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geos::geom::GeometryFactory *arg1 = (geos::geom::GeometryFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geos::geom::GeometryFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXGeosLineString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geos::geom::LineString *arg1 = (geos::geom::LineString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geos::geom::LineString **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosLineString_1getCoordinateN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  geos::geom::LineString *arg1 = (geos::geom::LineString *) 0 ;
  int arg2 ;
  geos::geom::Coordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::LineString **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (geos::geom::Coordinate *) &((geos::geom::LineString const *)arg1)->getCoordinateN(arg2);
  *(geos::geom::Coordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosLineString_1getNumPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::LineString *arg1 = (geos::geom::LineString *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::LineString **)&jarg1; 
  result = (std::size_t)((geos::geom::LineString const *)arg1)->getNumPoints();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosLineString_1getCoordinate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::LineString *arg1 = (geos::geom::LineString *) 0 ;
  geos::geom::Coordinate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::LineString **)&jarg1; 
  result = (geos::geom::Coordinate *)((geos::geom::LineString const *)arg1)->getCoordinate();
  *(geos::geom::Coordinate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosLineString_1getLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  geos::geom::LineString *arg1 = (geos::geom::LineString *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::LineString **)&jarg1; 
  result = (double)((geos::geom::LineString const *)arg1)->getLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosMultiLineString_1getNumGeometries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::MultiLineString *arg1 = (geos::geom::MultiLineString *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::MultiLineString **)&jarg1; 
  result = (std::size_t)((geos::geom::MultiLineString const *)arg1)->getNumGeometries();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosMultiLineString_1getGeometryN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  geos::geom::MultiLineString *arg1 = (geos::geom::MultiLineString *) 0 ;
  std::size_t arg2 ;
  geos::geom::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::MultiLineString **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  result = (geos::geom::Geometry *)((geos::geom::MultiLineString const *)arg1)->getGeometryN(arg2);
  *(geos::geom::Geometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXGeosMultiLineString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geos::geom::MultiLineString *arg1 = (geos::geom::MultiLineString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geos::geom::MultiLineString **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXGeosPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geos::geom::Polygon *arg1 = (geos::geom::Polygon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geos::geom::Polygon **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosPolygon_1getExteriorRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::Polygon *arg1 = (geos::geom::Polygon *) 0 ;
  geos::geom::LineString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Polygon **)&jarg1; 
  result = (geos::geom::LineString *)((geos::geom::Polygon const *)arg1)->getExteriorRing();
  *(geos::geom::LineString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosPolygon_1getNumInteriorRing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::Polygon *arg1 = (geos::geom::Polygon *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Polygon **)&jarg1; 
  result = (size_t)((geos::geom::Polygon const *)arg1)->getNumInteriorRing();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosPolygon_1getInteriorRingN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  geos::geom::Polygon *arg1 = (geos::geom::Polygon *) 0 ;
  std::size_t arg2 ;
  geos::geom::LineString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Polygon **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  result = (geos::geom::LineString *)((geos::geom::Polygon const *)arg1)->getInteriorRingN(arg2);
  *(geos::geom::LineString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXGeosMultiPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geos::geom::MultiPolygon *arg1 = (geos::geom::MultiPolygon *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geos::geom::MultiPolygon **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosMultiPolygon_1getNumGeometries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::MultiPolygon *arg1 = (geos::geom::MultiPolygon *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::MultiPolygon **)&jarg1; 
  result = (std::size_t)((geos::geom::MultiPolygon const *)arg1)->getNumGeometries();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosMultiPolygon_1getGeometryN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  geos::geom::MultiPolygon *arg1 = (geos::geom::MultiPolygon *) 0 ;
  std::size_t arg2 ;
  geos::geom::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::MultiPolygon **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  result = (geos::geom::Geometry *)((geos::geom::MultiPolygon const *)arg1)->getGeometryN(arg2);
  *(geos::geom::Geometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_decryptString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Innerpeacer::MapSDK::Encryption::decryptString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_encryptString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Innerpeacer::MapSDK::Encryption::encryptString(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_decryptFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = Innerpeacer::MapSDK::Encryption::decryptFile((char const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_decryptString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = Innerpeacer::MapSDK::Encryption::decryptString(arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_encryptString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = Innerpeacer::MapSDK::Encryption::encryptString(arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_encryptFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  Innerpeacer::MapSDK::Encryption::encryptFile((char const *)arg1,(char const *)arg2,(char const *)arg3);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_decryptFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = Innerpeacer::MapSDK::Encryption::decryptFile((char const *)arg1,(char const *)arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_md5(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = Innerpeacer::MapSDK::md5(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_checkValidity(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)Innerpeacer::MapSDK::License::checkValidity(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_getExpiredDate(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = Innerpeacer::MapSDK::License::getExpiredDate(arg1,arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_CastedPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::Geometry *arg1 = (geos::geom::Geometry *) 0 ;
  geos::geom::Point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Geometry **)&jarg1; 
  result = (geos::geom::Point *)Innerpeacer::MapSDK::GeosGeometryCaster::CastedPoint(arg1);
  *(geos::geom::Point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_CastedMultiPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::Geometry *arg1 = (geos::geom::Geometry *) 0 ;
  geos::geom::MultiPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Geometry **)&jarg1; 
  result = (geos::geom::MultiPoint *)Innerpeacer::MapSDK::GeosGeometryCaster::CastedMultiPoint(arg1);
  *(geos::geom::MultiPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_CastedLineString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::Geometry *arg1 = (geos::geom::Geometry *) 0 ;
  geos::geom::LineString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Geometry **)&jarg1; 
  result = (geos::geom::LineString *)Innerpeacer::MapSDK::GeosGeometryCaster::CastedLineString(arg1);
  *(geos::geom::LineString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_CastedMultiLineString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::Geometry *arg1 = (geos::geom::Geometry *) 0 ;
  geos::geom::MultiLineString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Geometry **)&jarg1; 
  result = (geos::geom::MultiLineString *)Innerpeacer::MapSDK::GeosGeometryCaster::CastedMultiLineString(arg1);
  *(geos::geom::MultiLineString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_CastedPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::Geometry *arg1 = (geos::geom::Geometry *) 0 ;
  geos::geom::Polygon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Geometry **)&jarg1; 
  result = (geos::geom::Polygon *)Innerpeacer::MapSDK::GeosGeometryCaster::CastedPolygon(arg1);
  *(geos::geom::Polygon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_CastedMultiPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  geos::geom::Geometry *arg1 = (geos::geom::Geometry *) 0 ;
  geos::geom::MultiPolygon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::Geometry **)&jarg1; 
  result = (geos::geom::MultiPolygon *)Innerpeacer::MapSDK::GeosGeometryCaster::CastedMultiPolygon(arg1);
  *(geos::geom::MultiPolygon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_getPointN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  geos::geom::MultiPoint *arg1 = (geos::geom::MultiPoint *) 0 ;
  std::size_t arg2 ;
  geos::geom::Point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::MultiPoint **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  result = (geos::geom::Point *)Innerpeacer::MapSDK::GeosGeometryCaster::getPointN(arg1,arg2);
  *(geos::geom::Point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_getLineStringN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  geos::geom::MultiLineString *arg1 = (geos::geom::MultiLineString *) 0 ;
  std::size_t arg2 ;
  geos::geom::LineString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::MultiLineString **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  result = (geos::geom::LineString *)Innerpeacer::MapSDK::GeosGeometryCaster::getLineStringN(arg1,arg2);
  *(geos::geom::LineString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_getPolygonN(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  geos::geom::MultiPolygon *arg1 = (geos::geom::MultiPolygon *) 0 ;
  std::size_t arg2 ;
  geos::geom::Polygon *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geos::geom::MultiPolygon **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  result = (geos::geom::Polygon *)Innerpeacer::MapSDK::GeosGeometryCaster::getPolygonN(arg1,arg2);
  *(geos::geom::Polygon **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_new_1IPXRouteNetworkDataset(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Innerpeacer::MapSDK::IPXRouteNetworkDataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Innerpeacer::MapSDK::IPXRouteNetworkDataset *)new Innerpeacer::MapSDK::IPXRouteNetworkDataset();
  *(Innerpeacer::MapSDK::IPXRouteNetworkDataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXRouteNetworkDataset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::MapSDK::IPXRouteNetworkDataset *arg1 = (Innerpeacer::MapSDK::IPXRouteNetworkDataset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::MapSDK::IPXRouteNetworkDataset **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXRouteNetworkDataset_1getShorestPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Innerpeacer::MapSDK::IPXRouteNetworkDataset *arg1 = (Innerpeacer::MapSDK::IPXRouteNetworkDataset *) 0 ;
  geos::geom::Point *arg2 = (geos::geom::Point *) 0 ;
  geos::geom::Point *arg3 = (geos::geom::Point *) 0 ;
  geos::geom::LineString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Innerpeacer::MapSDK::IPXRouteNetworkDataset **)&jarg1; 
  arg2 = *(geos::geom::Point **)&jarg2; 
  arg3 = *(geos::geom::Point **)&jarg3; 
  result = (geos::geom::LineString *)(arg1)->getShorestPath(arg2,arg3);
  *(geos::geom::LineString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXRouteNetworkDataset_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Innerpeacer::MapSDK::IPXRouteNetworkDataset *arg1 = (Innerpeacer::MapSDK::IPXRouteNetworkDataset *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXRouteNetworkDataset **)&jarg1; 
  result = ((Innerpeacer::MapSDK::IPXRouteNetworkDataset const *)arg1)->toString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_new_1IPXRouteNetworkDBAdapter(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter *)new Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter((char const *)arg1);
  *(Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXRouteNetworkDBAdapter_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter *arg1 = (Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter **)&jarg1; 
  result = (bool)(arg1)->open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXRouteNetworkDBAdapter_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter *arg1 = (Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXRouteNetworkDBAdapter_1readRouteNetworkDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter *arg1 = (Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter *) 0 ;
  Innerpeacer::MapSDK::IPXRouteNetworkDataset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter **)&jarg1; 
  result = (Innerpeacer::MapSDK::IPXRouteNetworkDataset *)(arg1)->readRouteNetworkDataset();
  *(Innerpeacer::MapSDK::IPXRouteNetworkDataset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXRouteNetworkDBAdapter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter *arg1 = (Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::MapSDK::IPXRouteNetworkDBAdapter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1geometry_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  geos::geom::Geometry *arg2 = (geos::geom::Geometry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  arg2 = *(geos::geom::Geometry **)&jarg2; 
  if (arg1) (arg1)->geometry = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1geometry_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  geos::geom::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  result = (geos::geom::Geometry *) ((arg1)->geometry);
  *(geos::geom::Geometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1geoID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->geoID = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1geoID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->geoID);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1poiID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->poiID = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1poiID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->poiID);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1categoryID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->categoryID = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1categoryID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->categoryID);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1symbolID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->symbolID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1symbolID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  result = (int) ((arg1)->symbolID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1floorNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->floorNumber = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1floorNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  result = (int) ((arg1)->floorNumber);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1layer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->layer = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXFeatureRecord_1layer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  result = (int) ((arg1)->layer);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_new_1IPXFeatureRecord(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Innerpeacer::MapSDK::IPXFeatureRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Innerpeacer::MapSDK::IPXFeatureRecord *)new Innerpeacer::MapSDK::IPXFeatureRecord();
  *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXFeatureRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::MapSDK::IPXFeatureRecord *arg1 = (Innerpeacer::MapSDK::IPXFeatureRecord *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::MapSDK::IPXFeatureRecord **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_new_1VectorOfFeatureRecord_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *)new std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >();
  *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_new_1VectorOfFeatureRecord_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::size_type arg1 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::size_type)jarg1; 
  result = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *)new std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >(arg1);
  *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_VectorOfFeatureRecord_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *arg1 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *) 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jarg1; 
  result = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::size_type)((std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > const *)arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_VectorOfFeatureRecord_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *arg1 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *) 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jarg1; 
  result = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::size_type)((std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > const *)arg1)->capacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_VectorOfFeatureRecord_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *arg1 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *) 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jarg1; 
  arg2 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_VectorOfFeatureRecord_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *arg1 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jarg1; 
  result = (bool)((std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_VectorOfFeatureRecord_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *arg1 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_VectorOfFeatureRecord_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *arg1 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *) 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type *arg2 = 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jarg1; 
  temp2 = *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type *)&jarg2;
  arg2 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_VectorOfFeatureRecord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *arg1 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *) 0 ;
  int arg2 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type *) &std_vector_Sl_Innerpeacer_MapSDK_IPXFeatureRecord_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_VectorOfFeatureRecord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *arg1 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *) 0 ;
  int arg2 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type *arg3 = 0 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type *)&jarg3;
  arg3 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >::value_type *)&temp3; 
  try {
    std_vector_Sl_Innerpeacer_MapSDK_IPXFeatureRecord_Sm__Sg__set(arg1,arg2,(Innerpeacer::MapSDK::IPXFeatureRecord *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1VectorOfFeatureRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *arg1 = (std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_new_1IPXMapDataDBAdapter(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Innerpeacer::MapSDK::IPXMapDataDBAdapter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Innerpeacer::MapSDK::IPXMapDataDBAdapter *)new Innerpeacer::MapSDK::IPXMapDataDBAdapter((char const *)arg1);
  *(Innerpeacer::MapSDK::IPXMapDataDBAdapter **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXMapDataDBAdapter_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Innerpeacer::MapSDK::IPXMapDataDBAdapter *arg1 = (Innerpeacer::MapSDK::IPXMapDataDBAdapter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXMapDataDBAdapter **)&jarg1; 
  result = (bool)(arg1)->open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXMapDataDBAdapter_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Innerpeacer::MapSDK::IPXMapDataDBAdapter *arg1 = (Innerpeacer::MapSDK::IPXMapDataDBAdapter *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXMapDataDBAdapter **)&jarg1; 
  result = (bool)(arg1)->close();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXMapDataDBAdapter_1getAllRecordsOnFloor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Innerpeacer::MapSDK::IPXMapDataDBAdapter *arg1 = (Innerpeacer::MapSDK::IPXMapDataDBAdapter *) 0 ;
  int arg2 ;
  std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXMapDataDBAdapter **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getAllRecordsOnFloor(arg2);
  *(std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > **)&jresult = new std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * >((const std::vector< Innerpeacer::MapSDK::IPXFeatureRecord * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXMapDataDBAdapter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::MapSDK::IPXMapDataDBAdapter *arg1 = (Innerpeacer::MapSDK::IPXMapDataDBAdapter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::MapSDK::IPXMapDataDBAdapter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_new_1IPXPathCalibration(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Innerpeacer::MapSDK::IPXPathCalibration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Innerpeacer::MapSDK::IPXPathCalibration *)new Innerpeacer::MapSDK::IPXPathCalibration((char const *)arg1);
  *(Innerpeacer::MapSDK::IPXPathCalibration **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_delete_1IPXPathCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Innerpeacer::MapSDK::IPXPathCalibration *arg1 = (Innerpeacer::MapSDK::IPXPathCalibration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Innerpeacer::MapSDK::IPXPathCalibration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXPathCalibration_1setBufferWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Innerpeacer::MapSDK::IPXPathCalibration *arg1 = (Innerpeacer::MapSDK::IPXPathCalibration *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXPathCalibration **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setBufferWidth(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXPathCalibration_1calibratePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Innerpeacer::MapSDK::IPXPathCalibration *arg1 = (Innerpeacer::MapSDK::IPXPathCalibration *) 0 ;
  geos::geom::Coordinate arg2 ;
  geos::geom::Coordinate *argp2 ;
  geos::geom::Coordinate result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Innerpeacer::MapSDK::IPXPathCalibration **)&jarg1; 
  argp2 = *(geos::geom::Coordinate **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null geos::geom::Coordinate");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->calibratePoint(arg2);
  *(geos::geom::Coordinate **)&jresult = new geos::geom::Coordinate((const geos::geom::Coordinate &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXPathCalibration_1getPathCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Innerpeacer::MapSDK::IPXPathCalibration *arg1 = (Innerpeacer::MapSDK::IPXPathCalibration *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXPathCalibration **)&jarg1; 
  result = (int)((Innerpeacer::MapSDK::IPXPathCalibration const *)arg1)->getPathCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXPathCalibration_1getUnionPaths(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Innerpeacer::MapSDK::IPXPathCalibration *arg1 = (Innerpeacer::MapSDK::IPXPathCalibration *) 0 ;
  geos::geom::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXPathCalibration **)&jarg1; 
  result = (geos::geom::Geometry *)((Innerpeacer::MapSDK::IPXPathCalibration const *)arg1)->getUnionPaths();
  *(geos::geom::Geometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXPathCalibration_1getUnionPathBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Innerpeacer::MapSDK::IPXPathCalibration *arg1 = (Innerpeacer::MapSDK::IPXPathCalibration *) 0 ;
  geos::geom::Geometry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Innerpeacer::MapSDK::IPXPathCalibration **)&jarg1; 
  result = (geos::geom::Geometry *)((Innerpeacer::MapSDK::IPXPathCalibration const *)arg1)->getUnionPathBuffer();
  *(geos::geom::Geometry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosGeometryCollection_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(geos::geom::Geometry **)&baseptr = *(geos::geom::GeometryCollection **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosPoint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(geos::geom::Geometry **)&baseptr = *(geos::geom::Point **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosMutliPoint_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(geos::geom::GeometryCollection **)&baseptr = *(geos::geom::MultiPoint **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosLineString_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(geos::geom::Geometry **)&baseptr = *(geos::geom::LineString **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosMultiLineString_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(geos::geom::GeometryCollection **)&baseptr = *(geos::geom::MultiLineString **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosPolygon_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(geos::geom::Geometry **)&baseptr = *(geos::geom::Polygon **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_ty_mapsdk_swig_IPMapSDKJNI_IPXGeosMultiPolygon_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(geos::geom::GeometryCollection **)&baseptr = *(geos::geom::MultiPolygon **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

